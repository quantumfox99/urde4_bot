import os
import asyncio
import random
import pytz
import requests
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_TOKEN = os.getenv("OPENWEATHER_TOKEN")

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS = [
    {"chat_id": 123456789, "name": "–ñ–µ–Ω—è", "city": "Warsaw", "timezone": "Europe/Warsaw"},
    {"chat_id": 987654321, "name": "–ù–∏–∫–∏—Ç–∞", "city": "Warsaw", "timezone": "Europe/Warsaw"},
    {"chat_id": 555555555, "name": "–†–æ–º–∞", "city": "Rivne", "timezone": "Europe/Kyiv"},
    {"chat_id": 444444444, "name": "–í–∏—Ç–µ–∫", "city": "Kelowna", "timezone": "America/Vancouver"},
]

PREDICTIONS = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ —É–ª—ã–±–Ω—ë—Ç—Å—è —É–¥–∞—á–∞!",
    "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –≤ –ø—É—Ç–∏.",
    "–ñ–¥–∏ —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤–µ—á–µ—Ä–æ–º.",
    "–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –≤–æ–¥—É!",
    "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç.",
    "–°—Ç–∞—Ä—ã–π –¥—Ä—É–≥ –º–æ–∂–µ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–µ–±–µ.",
    "–û–¥–∏–Ω —à–∞–≥ ‚Äî —É–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥.",
    "–ù–µ –≤—Å–µ —á—É–¥–µ—Å–∞ –≥—Ä–æ–º–∫–∏–µ. –ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Å—å.",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –¥–ª—è –¥–æ–±—Ä—ã—Ö –ø–æ—Å—Ç—É–ø–∫–æ–≤."
    # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –µ—â—ë 200+
]

def get_weather(city: str) -> str:
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"].capitalize()
        return f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {desc}"
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00.")

async def send_weather(app):
    now = datetime.now(pytz.utc)
    for user in USERS:
        tz = pytz.timezone(user["timezone"])
        local_now = now.astimezone(tz)
        if local_now.hour == 7 and local_now.minute < 10:
            weather = get_weather(user["city"])
            prediction = random.choice(PREDICTIONS)
            text = f"{weather}\n\nüîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:\n{prediction}"
            try:
                await app.bot.send_message(chat_id=user["chat_id"], text=text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è {user['name']}: {e}")

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(send_weather(app)), "interval", minutes=10)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
